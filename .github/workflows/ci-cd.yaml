name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: timescale/timescaledb:latest-pg14
        env:
          POSTGRES_DB: usdc_arbitrage
          POSTGRES_USER: arb_user
          POSTGRES_PASSWORD: strongpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv pip install -e .
          uv pip install pytest pytest-cov

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_NAME: usdc_arbitrage
          DB_USER: arb_user
          DB_PASSWORD: strongpassword
          SECRET_KEY: test_secret_key
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          REFRESH_TOKEN_EXPIRE_DAYS: 7
        run: |
          pytest --cov=src tests/

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure AWS credentials
        uses: aws/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update Kubernetes config
        run: |
          aws eks update-kubeconfig --name usdc-arbitrage-cluster --region us-west-2

      - name: Update image tag
        run: |
          cd k8s/overlays/staging
          kustomize edit set image ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: Deploy to staging
        run: |
          kustomize build k8s/overlays/staging | kubectl apply -f -
          kubectl rollout status deployment/usdc-arbitrage-api -n usdc-arbitrage-staging

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure AWS credentials
        uses: aws/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update Kubernetes config
        run: |
          aws eks update-kubeconfig --name usdc-arbitrage-cluster --region us-west-2

      - name: Update image tag
        run: |
          cd k8s/overlays/production
          kustomize edit set image ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: Deploy to production with blue-green strategy
        run: |
          # Create new deployment (green)
          kustomize build k8s/overlays/production | kubectl apply -f -

          # Wait for new deployment to be ready
          kubectl rollout status deployment/usdc-arbitrage-api -n usdc-arbitrage-production

          # Switch traffic to new deployment
          kubectl patch service usdc-arbitrage-api -n usdc-arbitrage-production -p '{"spec":{"selector":{"app":"usdc-arbitrage-api","version":"${{ github.sha }}"}}}'

          # Wait for traffic to stabilize
          sleep 30

          # If everything is good, remove old deployment (blue)
          kubectl delete deployment -l app=usdc-arbitrage-api,version!=${{ github.sha }} -n usdc-arbitrage-production
